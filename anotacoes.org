#+Title: Anotacoes
#+Subtitle:

* Configurando o banco de dados da aplicacao
   
  Primeiro tem que criar o banco. Estamos utilizando lpcg como nome do banco

   #+NAME: psql -U postgres -W -h localhost -c "CREATE DATABASE lpcg"                    
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      psql -U postgres -W -h localhost -c "CREATE DATABASE lpcg"
   #+END_SRC

   #+RESULTS: psql -U postgres -W -h localhost -c "CREATE DATABASE lpcg"
   : 
   : Senha: 
   : CREATE DATABASE

   #+NAME: psql -U postgres -h localhost -W  -d lpcg -c res/create_db.sql                     
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      psql -U postgres -h localhost -W  -d lpcg -a- -f res/create_db.sql      
   #+END_SRC

   #+RESULTS: psql -U postgres -h localhost -W  -d lpcg -c res/create_db.sql
   #+begin_example

   Senha: 
   create table polos(
     id serial primary key,
     nome varchar(50) not null
   );
   CREATE TABLE
   create table alunos(
      id serial primary key,
      nome varchar(100) not null,
      dta_nasc date,
      sexo varchar (10),
      rg int (10),
      escolaridade varchar(30),
      cidade varchar(100),
      estado varchar(10),
      cep varchar(10),
      endereco varchar(100),
      bairro varchar(30),
      celular varchar(13),
      telefone varchar(13),
      email varchar(50) not null,
      profissao varchar(50),
      ocupacao varchar(50),
      local_trabalho varchar(100),
      senha varchar(15) not null,
      resp boolean not null,
      fk_polo int not null,
      foreign key (fk_polo) references polos(id)
   );
   psql:res/create_db.sql:28: ERROR:  syntax error at or near "("
   LINHA 6:    rg int (10),
                      ^
   create table frequencia(
      id serial primary key,
      data date not null,
      presenca boolean not null,
      fk_lista int not null,
      foreign key (fk_lista) references lista(id)
   );
   psql:res/create_db.sql:38: ERROR:  relation "lista" does not exist
   #+end_example


   


* Pra rodar a aplicação
  Por enquanto esta previsto essas maneiras

  
   #+NAME:node src/main.js env=devlocal
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      node src/main.js env=devlocal
   #+END_SRC
  
   
   #+NAME:npm startDevLocal        
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      npm startDevLocal
   #+END_SRC
  
   
   #+NAME:                     
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      grunt clean concat uglify copy 
   #+END_SRC

   
   #+NAME:                     
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      grunt exec:test
   #+END_SRC


* Rodar testes
  npm test


* Sobre o diretorio env
  Qdo rodar o software podemos passar o argumento env=devlocal por
  exemplo. Isso faz o modulo env/environment.js carregar o arquivo de
  propriedade devlocal.props o que define parametros como nome de
  usuarios e senha.
  No momento essas credenciis sao utilizadas para conecar no banco de
  dados.


* Qualidade do codigo
  rode grunt exec:eslint pra ver o que he necessario pra melhorar a
  qualidade do codigo.
  
   #+NAME:                     
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      grunt exec:eslint
   #+END_SRC

   #+RESULTS: 
   #+begin_example

   [wagner@localhost lpcg]$ Running "exec:eslint" (exec) task

   /home/wagner/wagnerdocri@gmail.com3/envs/env-dev/sources/lpcg/src/main.js
      4:80  warning  Missing semicolon                                 semi
      5:7   error    'env' is assigned a value but never used          no-unused-vars
      8:5   error    'persistence' is assigned a value but never used  no-unused-vars
     11:13  warning  Strings must use doublequote                      quotes
     12:5   warning  Strings must use doublequote                      quotes
     19:12  warning  Strings must use doublequote                      quotes
     20:5   warning  Strings must use doublequote                      quotes
     21:43  warning  Strings must use doublequote                      quotes
     24:12  warning  Strings must use doublequote                      quotes
     25:5   warning  Strings must use doublequote                      quotes
     26:43  warning  Strings must use doublequote                      quotes
     29:12  warning  Strings must use doublequote                      quotes
     30:5   warning  Strings must use doublequote                      quotes
     31:43  warning  Strings must use doublequote                      quotes
     34:12  warning  Strings must use doublequote                      quotes
     35:5   warning  Strings must use doublequote                      quotes
     36:43  warning  Strings must use doublequote                      quotes

   ✖ 17 problems (2 errors, 15 warnings)
     0 errors and 15 warnings potentially fixable with the `--fix` option.
   > Exited with code: 1.
   > Error executing child process: Error: Process exited with code 1.
   Warning: Task "exec:eslint" failed. Use --force to continue.

   Aborted due to warnings.
   #+end_example


* Typescript

** instalando typescript
   Como usar o typescript
   Primeiro, a instalação
   #+NAME: npm install typescript -g
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      npm install typescript --save
   #+END_SRC

   #+RESULTS: npm install typescript -g
   : 
   : + typescript@3.3.3333
   : added 1 package from 1 contributor and audited 2821 packages in 14.616s
   : found 11 vulnerabilities (1 low, 9 moderate, 1 high)
   :   run `npm audit fix` to fix them, or `npm audit` for details

   #+BEGIN_EXAMPLE
   /usr/bin/tsc -> /usr/lib/node_modules/typescript/bin/tsc
   /usr/bin/tsserver -> /usr/lib/node_modules/typescript/bin/tsserver
   + typescript@3.3.3333
   updated 1 package in 3.393s
   #+END_EXAMPLE

   https://github.com/Microsoft/TypeScript/wiki/Standalone-Server-%28tsserver%29
   https://github.com/mmorearty/tsserver-example
   https://github.com/ananthakumaran/tide


   Gerando o tsconfig.json
   #+NAME:./node_modules/.bin/tsc --init                  
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      node_modules/typescript/bin/tsc --init
   #+END_SRC

   #+RESULTS: ./node_modules/.bin/tsc --init
   : 
   : message TS6071: Successfully created a tsconfig.json file.

   Compilando arquivo model

** Opcoes do Compilador

   #+BEGIN_SRC javascript
   {
    "compilerOptions": {

        // /* Basic Options */
        /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */
        "target": "es5",

        /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
        "module": "commonjs",                     

        /* Specify library files to be included in the compilation. */
        // "lib": [],                            
        // "allowJs": true,                       /* Allow javascript files to be compiled. */
        // "checkJs": true,                       /* Report errors in .js files. */
        // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
        // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
        // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
        // "sourceMap": true,                     /* Generates corresponding '.map' file. */

        /* Concatenate and emit output to single file. */
        //"outFile": "./typescript_dist/tscompiled.js",  

        /* Redirect output structure to the directory. */
        "outDir": "./typescript_dist",         

        /* Specify the root directory of input files. 
         Use to control the output directory structure with --outDir. */
        //"rootDir": "./",                       
        // "composite": true,                     /* Enable project compilation */

        /* Do not emit comments to output. */
        "removeComments": true,               
        // "noEmit": true,                        /* Do not emit outputs. */
        // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
        // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
        // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

        /* Strict Type-Checking Options */
        "strict": true,                           /* Enable all strict type-checking options. */

        // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
        // "strictNullChecks": true,              /* Enable strict null checks. */
        // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
        // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
        // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
        // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
        // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

        /* Additional Checks */
        // "noUnusedLocals": true,                /* Report errors on unused locals. */
        // "noUnusedParameters": true,            /* Report errors on unused parameters. */
        // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
        // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

        /* Module Resolution Options */
        // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */

        /* Base directory to resolve non-absolute module names. */
        "baseUrl": "./",                      
        // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
        // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
        // "typeRoots": [],                       /* List of folders to include type definitions from. */
        // "types": [],                           /* Type declaration files to be included in compilation. */
        // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */

        /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. 
           Implies 'allowSyntheticDefaultImports'. */
        "esModuleInterop": true                   

        // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */

        /* Source Map Options */
        // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
        // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
        // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
        // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

        /* Experimental Options */
        // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
        // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
    },
     "include": [
        "src/**/*"
    ],
}

   #+END_SRC

** Detalhes importantes
   Pra usar o path, por exemplo...
   npm install --save-dev @types/node
   npm install --save @types/express-session
   npm install --save-dev @types/pg
   
* Todo
** uglify do not understend arrow functions...

   
